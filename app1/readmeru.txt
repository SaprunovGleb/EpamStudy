# App1

Этот проект содержит исходный код и вспомогательные файлы для бессерверного приложения, которое можно развернуть с помощью SAM 151. Он включает следующие файлы и папки.

- hello_world - код функции приложения и Dockerfile проекта Lambda.
- События - события вызова, которые можно использовать для вызова функции.
- Test - Модульные тесты для кода приложения.
- template.yaml - шаблон, определяющий ресурсы AWS приложения.

Приложение использует несколько ресурсов AWS, включая функции Lambda и API Gateway API. Эти ресурсы определены в файле `template.yaml` в этом проекте. Вы можете обновить шаблон, чтобы добавить развертывание ресурсов AWS, используя тот же процесс, который обновляет код вашего приложения.

## развертывает образец приложения

Модель приложений с бессерверным интерфейсом командной строки (SAM 151) является расширением AWS 151, которое добавляет функциональные возможности для создания и тестирования приложений Lambda. Он использует док-станции для запуска среды Linux, которая соответствует вашим функциям в Amazon Lambda. Он также может имитировать среду сборки и API вашего приложения.

Для использования SAM 151 вам потребуются следующие инструменты.

 SAM 151 - [Установите SAM 151] (httpsdocs.aws.amazon.comserverless-application-modellatestdeveloperguideserverless-Sam-cli-install.html)
 Док - [Installer docker community edition] (httpshub.docker.comsearchtype = edition и предлагает сообщество =)

Для локального тестирования вам может понадобиться следующее.
 [Установленный Python 3] (httpswww.python.orgdownloads)

Чтобы собрать и развернуть приложение в первый раз, запустите в своей оболочке следующее:

`` Баш
Сам билд
Сам развертывание - руководство
``

Первая команда создаст образ док-станции из файла Docker, а затем скопирует исходный код вашего приложения в образ док-станции. Вторая команда упакует и развернет ваше приложение в AWS с рядом запросов.

 Имя Имя стека для развертывания в стеке CloudFormation. Он должен быть уникальным для вашей учетной записи и регионов, и хорошей отправной точкой будет что-то, что соответствует названию вашего проекта.
 AWS Регион AWS Регион, в котором вы хотите развернуть приложение.
 Подтверждать изменения перед развертыванием. Если установлено «Да», все наборы изменений будут показаны вам перед выполнением для просмотра вручную. Если установлено значение Нет, AWS SAM 151 будет автоматически развертывать изменения приложений.
 Многие роли AWS IAM SAM 151 SAM позволяют создавать шаблоны, в том числе в этом примере создаются роли AWS IAM, необходимые для функций AWS Zeta, включенных для доступа к сервисам AWS. По умолчанию они ограничены минимально необходимыми разрешениями. Чтобы развернуть стек AWS CloudFormation, который создает или изменяет роли IAM, необходимо указать значение «value for CAPABILITY_IAM». Если в этом запросе разрешение не предоставляется, для развертывания этого примера вы должны явно указать --capabilities CAPABILITY_IAM в команде Sam deploy.
 Сохранить аргументы в samconfig.toml Если установлено значение yes, ваш выбор будет сохранен в файле конфигурации внутри проекта, так что в будущем вы можете просто повторно запустить `Sam deploy` без параметров для развертывания изменений в вашем приложении.

URL-адрес конечной точки API шлюза можно найти в выходных значениях, отображаемых после развертывания.

## Используйте SAM 151 для сборки и тестирования локально

Создайте свое приложение с помощью команды `Sam build`.

`` Баш
Сам билд $ App1
``

SAM 151 создает образ док-станции из файла Docker, а затем устанавливает зависимости, определенные в hello_worldrequirements.txt, внутри образа док-станции. Обработанный файл шаблона сохраняется в папке .aws-sambuild.

Протестируйте отдельную функцию, вызвав ее непосредственно с тестовым событием. Событие - это документ JSON, представляющий входные данные, которые функция получает от источника события. В этом проекте тестовые события находятся в папке `events`.

Запускать функции локально и вызывать их с помощью команды Sam local invoke.

`` Баш
App1 $ Sam локальный вызов HelloWorldFunction --event eventsevent.json
``

SAM 151 также может эмулировать API вашего приложения. Используйте API-интерфейс Sam local start-api для локального запуска на порту 3000.

`` Баш
App1 $ Sam локальный start-API
Приложение1 $ curl httplocalhost3000
``

SAM 151 считывает шаблон приложения, чтобы определить маршрут API и функции, которые они вызывают. Свойство `Events` в определении каждой функции включает маршрут и метод для каждого пути.

Ямл
      События
        Привет мир
          тип Api
          Свойства
            привет путь
            метод получить
``

## Добавьте ресурс в ваше приложение
В шаблоне приложения для определения ресурсов приложения используется модель бессерверного приложения AWS (AWS SAM). Sam - это расширение AWS AWS CloudFormation с простым синтаксисом для настройки общих ресурсов бессерверных приложений, таких как функции, триггеры и API. Для ресурсов, не включенных в [спецификацию Sam] (httpsgithub.comawslabsserverless-application-modelblobmasterversions2016-10-31.md), вы можете использовать стандартный [AWS CloudFormation] (httpsdocs.aws.amazon.comAWSCloudFormationlatestUserGuideaws-template-type resource-ref. html) типы ресурсов.

## Журналы дзета-функций Petch, tail и filter

Для упрощения поиска и устранения неисправностей в SAM 151 есть команда Sam logs. 'Sam logs' позволяет вам получать журналы, созданные вашей развернутой функцией Zeta, из командной строки. Помимо печати журналов в терминале, эта команда имеет несколько полезных функций, которые помогут вам быстро найти ошибку.

ПРИМЕЧАНИЕ Эта команда работает для всех функций AWS Lambda; не только те, которые вы развертываете с помощью SAM.

`` Баш
App1 $ Sam logs -n HelloWorldFunction --stack-name App1 --tail
``

Дополнительные сведения и примеры журналов функций фильтрации можно найти в LAMBDA [Sam 151 Documentation] (httpsdocs.aws.amazon.comserverless-application-modellatestdeveloperguideserverless-Sam-cli-logging.html).

## Модульные тесты

В этом проекте тесты определены в папке «tests». Используйте PIP, чтобы установить [pytest] (httpsdocs.pytest.orgenlatest) и запустить модульный тест с вашего локального компьютера.

`` Баш
App1 $ pip install pytest pytest mock --- пользователь
Приложение1 $ python -m тесты pytest -v
``

## Очистка

Чтобы удалить созданный вами образец приложения, используйте AWS 151. Предполагая, что вы использовали свое имя в качестве имени стека проекта, вы можете запустить следующее

`` Баш
Стек удаления облачной информации AWS --stack-name App1
``

## Ресурсы

См. [Руководство разработчика AWS Sam] (httpsdocs.aws.amazon.comserverless-application-modellatestdeveloperguidewhat-IS-sam.html) для ознакомления со спецификацией Sam, SAM 151 и концепциями бессерверных приложений.

Затем вы можете использовать бессерверный репозиторий приложений AWS для развертывания готовых к использованию приложений, выходящих за рамки тестовых образцов, и узнать, как авторы разрабатывали свои приложения [главная страница бессерверного репозитория приложений AWS] (httpsaws.amazon.comserverlessserverlessrepo)